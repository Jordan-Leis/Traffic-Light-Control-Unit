library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity State_Machine is port
(
	clk			: in std_logic;
	reset			: in std_logic;
	clk_enable	: in std_logic;
	
	NS_walk		: out std_logic;
	EW_walk		: out std_logic;
	
	NS_green		: out std_logic;
	NS_yellow	: out std_logic;
	NS_red		: out std_logic;
	
	EW_green		: out std_logic;
	EW_yellow	: out std_logic;
	EW_red		: out std_logic;
	
	
);
end entity;
 

 architecture cir of State_Machine is
 
 

 
 type STATE_NAMES is (S0, S1, S2, S3, S4, S5, S6, S7, s8, s9, s10, s11, s12, s13, s14, s15);   

 
 signal current_state, next_state	:  STATE_NAMES;


 begin
 

 -------------------------------------------------------------------------------
 --State Machine:
 -------------------------------------------------------------------------------

 -- REGISTER_LOGIC PROCESS EXAMPLE
 
set_state_out: process(clk)
	begin
		if (rising_edge(clk)) then
			if (reset = '1') then
				current_state <= s0;
			elsif (clk_enable ='1') then
				current_state <= next_state;
			end if;
		end if;
	end process; 
			
change_state: process (current_state)
	begin
		case current_state is
			when S0 =>
            next_state <= S1;
        when S1 =>
            next_state <= S2;
        when S2 =>
            next_state <= S3;
        when S3 =>
            next_state <= S4;
        when S4 =>
            next_state <= S5;
        when S5 =>
            next_state <= S6;
        when S6 =>
            next_state <= S7;
        when S7 =>
            next_state <= S8;
        when S8 =>
            next_state <= S9;
        when S9 =>
            next_state <= S10;
        when S10 =>
            next_state <= S11;
        when S11 =>
            next_state <= S12;
        when S12 =>
            next_state <= S13;
        when S13 =>
            next_state <= S14;
        when S14 =>
            next_state <= S15;
        when S15 =>
            next_state <= S0;
		end case;
	end process;

set_output_lights: process(current_state)
	begin
		case current_state is 
			when s0 or s1 => 
				NS_walk		<= '0';
				EW_walk		<= '0';
	
				NS_green		<= '0';
				NS_yellow	<= '0';
				NS_red		<= '0';
	
				EW_green		<= '0';
				EW_yellow	<= '0';
				EW_red		<= '1';
			when s2 or s3 or s4 or s5 => 
				NS_walk		<= '1';
				EW_walk		<= '0';
	
				NS_green		<= '1';
				NS_yellow	<= '0';
				NS_red		<= '0';
	
				EW_green		<= '0';
				EW_yellow	<= '0';
				EW_red		<= '1';
			when s6 or s7 => 
				NS_walk		<= '0';
				EW_walk		<= '0';
	
				NS_green		<= '0';
				NS_yellow	<= '1';
				NS_red		<= '0';
	
				EW_green		<= '0';
				EW_yellow	<= '0';
				EW_red		<= '1';
			when s8 or s9 => 
				NS_walk		<= '0';
				EW_walk		<= '0';
	
				NS_green		<= '0';
				NS_yellow	<= '0';
				NS_red		<= '1';
	
				EW_green		<= '0';
				EW_yellow	<= '0';
				EW_red		<= '0';
			when s10 or s11 or s12 or s13 => 
				NS_walk		<= '0';
				EW_walk		<= '1';
	
				NS_green		<= '0';
				NS_yellow	<= '0';
				NS_red		<= '1';
	
				EW_green		<= '1';
				EW_yellow	<= '0';
				EW_red		<= '0';
			when s14 or s15 => 
				NS_walk		<= '0';
				EW_walk		<= '0';
	
				NS_green		<= '0';
				NS_yellow	<= '0';
				NS_red		<= '1';
	
				EW_green		<= '0';
				EW_yellow	<= '1';
				EW_red		<= '0';
		end case; 
	end process;


 end architecture cir;
